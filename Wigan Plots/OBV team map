from scipy.stats import binned_statistic_2d
import numpy as np
from mplsoccer.pitch import Pitch
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import AxesGrid
from statsbombpy import sb

events = sb.competition_events(
    country="England",
    division="League One",
    season="2021/2022",
    split=False,
    creds = {'user':'email','passwd':'password'}
)

def obv_for_net_heatmap(
    x,
    y,
    values,
    teams,
    team_to_plot,
    title,
    x_bins=np.linspace(0, 120, 7),
    y_bins=np.linspace(0, 80, 5),
):
    x, y, values, teams = (
        np.asarray(x),
        np.asarray(y),
        np.asarray(values),
        np.asarray(teams),
    )
    unique_teams = np.unique(teams)
    n_teams = unique_teams.size
    n_x_bins, n_y_bins = x_bins.size - 1, y_bins.size - 1

    binned_values = np.empty((n_teams, n_x_bins, n_y_bins))
    for idx, team in enumerate(unique_teams):
        binned_values[idx] = binned_statistic_2d(
            x[teams == team],
            y[teams == team],
            values[teams == team],
            statistic="sum",
            bins=[x_bins, y_bins],
        ).statistic
    


    fig, ax = plt.subplots(figsize=(12, 8))

    team_idx = np.where(unique_teams == team_to_plot)[0][0]

    pitch = Pitch(line_zorder=10000)
    pitch.draw(ax=ax)
    im = ax.imshow(
        binned_values[team_idx].T,
        vmin=-np.max(np.abs(binned_values)),
        vmax=np.max(np.abs(binned_values)),
        extent=(0, 120, 80, 0),
        cmap="bwr",
    )
    fig.colorbar(im)
    ax.set_title(str(unique_teams[team_idx]), pad=0.05, fontsize=11)

    fig.suptitle(title, fontsize=16)
    
events = events[events["type"].isin(["Pass", "Carry"])]

events["x"] = events["location"].apply(lambda x: x[0])
events["y"] = events["location"].apply(lambda x: x[1])
events["obv_for_net"] = events["obv_for_net"].astype(float)
X = events[["x", "y", "obv_for_net", "team"]].dropna()    

obv_for_net_heatmap(X["x"], X["y"], X["obv_for_net"], X["team"], 'Doncaster Rovers', "OBV For Net")
